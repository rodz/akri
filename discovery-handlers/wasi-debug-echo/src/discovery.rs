// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/discovery.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
pub struct RegisterDiscoveryHandlerRequest {
    // message fields
    pub name: ::std::string::String,
    pub endpoint: ::std::string::String,
    pub endpoint_type: RegisterDiscoveryHandlerRequest_EndpointType,
    pub shared: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterDiscoveryHandlerRequest {
    fn default() -> &'a RegisterDiscoveryHandlerRequest {
        <RegisterDiscoveryHandlerRequest as ::protobuf::Message>::default_instance()
    }
}

impl RegisterDiscoveryHandlerRequest {
    pub fn new() -> RegisterDiscoveryHandlerRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string endpoint = 2;


    pub fn get_endpoint(&self) -> &str {
        &self.endpoint
    }
    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: ::std::string::String) {
        self.endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.endpoint
    }

    // Take field
    pub fn take_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.endpoint, ::std::string::String::new())
    }

    // .v0.RegisterDiscoveryHandlerRequest.EndpointType endpoint_type = 3;


    pub fn get_endpoint_type(&self) -> RegisterDiscoveryHandlerRequest_EndpointType {
        self.endpoint_type
    }
    pub fn clear_endpoint_type(&mut self) {
        self.endpoint_type = RegisterDiscoveryHandlerRequest_EndpointType::UDS;
    }

    // Param is passed by value, moved
    pub fn set_endpoint_type(&mut self, v: RegisterDiscoveryHandlerRequest_EndpointType) {
        self.endpoint_type = v;
    }

    // bool shared = 4;


    pub fn get_shared(&self) -> bool {
        self.shared
    }
    pub fn clear_shared(&mut self) {
        self.shared = false;
    }

    // Param is passed by value, moved
    pub fn set_shared(&mut self, v: bool) {
        self.shared = v;
    }
}

impl ::protobuf::Message for RegisterDiscoveryHandlerRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.endpoint)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.endpoint_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.shared = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.endpoint);
        }
        if self.endpoint_type != RegisterDiscoveryHandlerRequest_EndpointType::UDS {
            my_size += ::protobuf::rt::enum_size(3, self.endpoint_type);
        }
        if self.shared != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.endpoint.is_empty() {
            os.write_string(2, &self.endpoint)?;
        }
        if self.endpoint_type != RegisterDiscoveryHandlerRequest_EndpointType::UDS {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.endpoint_type))?;
        }
        if self.shared != false {
            os.write_bool(4, self.shared)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisterDiscoveryHandlerRequest {
        RegisterDiscoveryHandlerRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &RegisterDiscoveryHandlerRequest| { &m.name },
                |m: &mut RegisterDiscoveryHandlerRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "endpoint",
                |m: &RegisterDiscoveryHandlerRequest| { &m.endpoint },
                |m: &mut RegisterDiscoveryHandlerRequest| { &mut m.endpoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RegisterDiscoveryHandlerRequest_EndpointType>>(
                "endpoint_type",
                |m: &RegisterDiscoveryHandlerRequest| { &m.endpoint_type },
                |m: &mut RegisterDiscoveryHandlerRequest| { &mut m.endpoint_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "shared",
                |m: &RegisterDiscoveryHandlerRequest| { &m.shared },
                |m: &mut RegisterDiscoveryHandlerRequest| { &mut m.shared },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegisterDiscoveryHandlerRequest>(
                "RegisterDiscoveryHandlerRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegisterDiscoveryHandlerRequest {
        static instance: ::protobuf::rt::LazyV2<RegisterDiscoveryHandlerRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegisterDiscoveryHandlerRequest::new)
    }
}

impl ::protobuf::Clear for RegisterDiscoveryHandlerRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.endpoint.clear();
        self.endpoint_type = RegisterDiscoveryHandlerRequest_EndpointType::UDS;
        self.shared = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterDiscoveryHandlerRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterDiscoveryHandlerRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RegisterDiscoveryHandlerRequest_EndpointType {
    UDS = 0,
    NETWORK = 1,
}

impl ::protobuf::ProtobufEnum for RegisterDiscoveryHandlerRequest_EndpointType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RegisterDiscoveryHandlerRequest_EndpointType> {
        match value {
            0 => ::std::option::Option::Some(RegisterDiscoveryHandlerRequest_EndpointType::UDS),
            1 => ::std::option::Option::Some(RegisterDiscoveryHandlerRequest_EndpointType::NETWORK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RegisterDiscoveryHandlerRequest_EndpointType] = &[
            RegisterDiscoveryHandlerRequest_EndpointType::UDS,
            RegisterDiscoveryHandlerRequest_EndpointType::NETWORK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RegisterDiscoveryHandlerRequest_EndpointType>("RegisterDiscoveryHandlerRequest.EndpointType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RegisterDiscoveryHandlerRequest_EndpointType {
}

impl ::std::default::Default for RegisterDiscoveryHandlerRequest_EndpointType {
    fn default() -> Self {
        RegisterDiscoveryHandlerRequest_EndpointType::UDS
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterDiscoveryHandlerRequest_EndpointType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Empty {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Empty {
    fn default() -> &'a Empty {
        <Empty as ::protobuf::Message>::default_instance()
    }
}

impl Empty {
    pub fn new() -> Empty {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Empty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Empty {
        Empty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Empty>(
                "Empty",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Empty {
        static instance: ::protobuf::rt::LazyV2<Empty> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Empty::new)
    }
}

impl ::protobuf::Clear for Empty {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Empty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Empty {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DiscoverRequest {
    // message fields
    pub discovery_details: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DiscoverRequest {
    fn default() -> &'a DiscoverRequest {
        <DiscoverRequest as ::protobuf::Message>::default_instance()
    }
}

impl DiscoverRequest {
    pub fn new() -> DiscoverRequest {
        ::std::default::Default::default()
    }

    // string discovery_details = 1;


    pub fn get_discovery_details(&self) -> &str {
        &self.discovery_details
    }
    pub fn clear_discovery_details(&mut self) {
        self.discovery_details.clear();
    }

    // Param is passed by value, moved
    pub fn set_discovery_details(&mut self, v: ::std::string::String) {
        self.discovery_details = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_discovery_details(&mut self) -> &mut ::std::string::String {
        &mut self.discovery_details
    }

    // Take field
    pub fn take_discovery_details(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.discovery_details, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DiscoverRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.discovery_details)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.discovery_details.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.discovery_details);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.discovery_details.is_empty() {
            os.write_string(1, &self.discovery_details)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DiscoverRequest {
        DiscoverRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "discovery_details",
                |m: &DiscoverRequest| { &m.discovery_details },
                |m: &mut DiscoverRequest| { &mut m.discovery_details },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DiscoverRequest>(
                "DiscoverRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DiscoverRequest {
        static instance: ::protobuf::rt::LazyV2<DiscoverRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DiscoverRequest::new)
    }
}

impl ::protobuf::Clear for DiscoverRequest {
    fn clear(&mut self) {
        self.discovery_details.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DiscoverRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DiscoverRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DiscoverResponse {
    // message fields
    pub devices: ::protobuf::RepeatedField<Device>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DiscoverResponse {
    fn default() -> &'a DiscoverResponse {
        <DiscoverResponse as ::protobuf::Message>::default_instance()
    }
}

impl DiscoverResponse {
    pub fn new() -> DiscoverResponse {
        ::std::default::Default::default()
    }

    // repeated .v0.Device devices = 1;


    pub fn get_devices(&self) -> &[Device] {
        &self.devices
    }
    pub fn clear_devices(&mut self) {
        self.devices.clear();
    }

    // Param is passed by value, moved
    pub fn set_devices(&mut self, v: ::protobuf::RepeatedField<Device>) {
        self.devices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_devices(&mut self) -> &mut ::protobuf::RepeatedField<Device> {
        &mut self.devices
    }

    // Take field
    pub fn take_devices(&mut self) -> ::protobuf::RepeatedField<Device> {
        ::std::mem::replace(&mut self.devices, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DiscoverResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.devices {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.devices)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.devices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.devices {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DiscoverResponse {
        DiscoverResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Device>>(
                "devices",
                |m: &DiscoverResponse| { &m.devices },
                |m: &mut DiscoverResponse| { &mut m.devices },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DiscoverResponse>(
                "DiscoverResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DiscoverResponse {
        static instance: ::protobuf::rt::LazyV2<DiscoverResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DiscoverResponse::new)
    }
}

impl ::protobuf::Clear for DiscoverResponse {
    fn clear(&mut self) {
        self.devices.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DiscoverResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DiscoverResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Device {
    // message fields
    pub id: ::std::string::String,
    pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub mounts: ::protobuf::RepeatedField<Mount>,
    pub device_specs: ::protobuf::RepeatedField<DeviceSpec>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Device {
    fn default() -> &'a Device {
        <Device as ::protobuf::Message>::default_instance()
    }
}

impl Device {
    pub fn new() -> Device {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // repeated .v0.Device.PropertiesEntry properties = 2;


    pub fn get_properties(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.properties
    }
    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.properties, ::std::collections::HashMap::new())
    }

    // repeated .v0.Mount mounts = 3;


    pub fn get_mounts(&self) -> &[Mount] {
        &self.mounts
    }
    pub fn clear_mounts(&mut self) {
        self.mounts.clear();
    }

    // Param is passed by value, moved
    pub fn set_mounts(&mut self, v: ::protobuf::RepeatedField<Mount>) {
        self.mounts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mounts(&mut self) -> &mut ::protobuf::RepeatedField<Mount> {
        &mut self.mounts
    }

    // Take field
    pub fn take_mounts(&mut self) -> ::protobuf::RepeatedField<Mount> {
        ::std::mem::replace(&mut self.mounts, ::protobuf::RepeatedField::new())
    }

    // repeated .v0.DeviceSpec device_specs = 4;


    pub fn get_device_specs(&self) -> &[DeviceSpec] {
        &self.device_specs
    }
    pub fn clear_device_specs(&mut self) {
        self.device_specs.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_specs(&mut self, v: ::protobuf::RepeatedField<DeviceSpec>) {
        self.device_specs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_device_specs(&mut self) -> &mut ::protobuf::RepeatedField<DeviceSpec> {
        &mut self.device_specs
    }

    // Take field
    pub fn take_device_specs(&mut self) -> ::protobuf::RepeatedField<DeviceSpec> {
        ::std::mem::replace(&mut self.device_specs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Device {
    fn is_initialized(&self) -> bool {
        for v in &self.mounts {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.device_specs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.properties)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.mounts)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.device_specs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.properties);
        for value in &self.mounts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.device_specs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.properties, os)?;
        for v in &self.mounts {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.device_specs {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Device {
        Device::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Device| { &m.id },
                |m: &mut Device| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "properties",
                |m: &Device| { &m.properties },
                |m: &mut Device| { &mut m.properties },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Mount>>(
                "mounts",
                |m: &Device| { &m.mounts },
                |m: &mut Device| { &mut m.mounts },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeviceSpec>>(
                "device_specs",
                |m: &Device| { &m.device_specs },
                |m: &mut Device| { &mut m.device_specs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Device>(
                "Device",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Device {
        static instance: ::protobuf::rt::LazyV2<Device> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Device::new)
    }
}

impl ::protobuf::Clear for Device {
    fn clear(&mut self) {
        self.id.clear();
        self.properties.clear();
        self.mounts.clear();
        self.device_specs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Device {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Device {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Mount {
    // message fields
    pub container_path: ::std::string::String,
    pub host_path: ::std::string::String,
    pub read_only: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Mount {
    fn default() -> &'a Mount {
        <Mount as ::protobuf::Message>::default_instance()
    }
}

impl Mount {
    pub fn new() -> Mount {
        ::std::default::Default::default()
    }

    // string container_path = 1;


    pub fn get_container_path(&self) -> &str {
        &self.container_path
    }
    pub fn clear_container_path(&mut self) {
        self.container_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_container_path(&mut self, v: ::std::string::String) {
        self.container_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container_path(&mut self) -> &mut ::std::string::String {
        &mut self.container_path
    }

    // Take field
    pub fn take_container_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container_path, ::std::string::String::new())
    }

    // string host_path = 2;


    pub fn get_host_path(&self) -> &str {
        &self.host_path
    }
    pub fn clear_host_path(&mut self) {
        self.host_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_host_path(&mut self, v: ::std::string::String) {
        self.host_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_path(&mut self) -> &mut ::std::string::String {
        &mut self.host_path
    }

    // Take field
    pub fn take_host_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host_path, ::std::string::String::new())
    }

    // bool read_only = 3;


    pub fn get_read_only(&self) -> bool {
        self.read_only
    }
    pub fn clear_read_only(&mut self) {
        self.read_only = false;
    }

    // Param is passed by value, moved
    pub fn set_read_only(&mut self, v: bool) {
        self.read_only = v;
    }
}

impl ::protobuf::Message for Mount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.container_path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host_path)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.read_only = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.container_path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.container_path);
        }
        if !self.host_path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.host_path);
        }
        if self.read_only != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.container_path.is_empty() {
            os.write_string(1, &self.container_path)?;
        }
        if !self.host_path.is_empty() {
            os.write_string(2, &self.host_path)?;
        }
        if self.read_only != false {
            os.write_bool(3, self.read_only)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Mount {
        Mount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "container_path",
                |m: &Mount| { &m.container_path },
                |m: &mut Mount| { &mut m.container_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host_path",
                |m: &Mount| { &m.host_path },
                |m: &mut Mount| { &mut m.host_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "read_only",
                |m: &Mount| { &m.read_only },
                |m: &mut Mount| { &mut m.read_only },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Mount>(
                "Mount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Mount {
        static instance: ::protobuf::rt::LazyV2<Mount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Mount::new)
    }
}

impl ::protobuf::Clear for Mount {
    fn clear(&mut self) {
        self.container_path.clear();
        self.host_path.clear();
        self.read_only = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Mount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Mount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeviceSpec {
    // message fields
    pub container_path: ::std::string::String,
    pub host_path: ::std::string::String,
    pub permissions: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeviceSpec {
    fn default() -> &'a DeviceSpec {
        <DeviceSpec as ::protobuf::Message>::default_instance()
    }
}

impl DeviceSpec {
    pub fn new() -> DeviceSpec {
        ::std::default::Default::default()
    }

    // string container_path = 1;


    pub fn get_container_path(&self) -> &str {
        &self.container_path
    }
    pub fn clear_container_path(&mut self) {
        self.container_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_container_path(&mut self, v: ::std::string::String) {
        self.container_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container_path(&mut self) -> &mut ::std::string::String {
        &mut self.container_path
    }

    // Take field
    pub fn take_container_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container_path, ::std::string::String::new())
    }

    // string host_path = 2;


    pub fn get_host_path(&self) -> &str {
        &self.host_path
    }
    pub fn clear_host_path(&mut self) {
        self.host_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_host_path(&mut self, v: ::std::string::String) {
        self.host_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_path(&mut self) -> &mut ::std::string::String {
        &mut self.host_path
    }

    // Take field
    pub fn take_host_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host_path, ::std::string::String::new())
    }

    // string permissions = 3;


    pub fn get_permissions(&self) -> &str {
        &self.permissions
    }
    pub fn clear_permissions(&mut self) {
        self.permissions.clear();
    }

    // Param is passed by value, moved
    pub fn set_permissions(&mut self, v: ::std::string::String) {
        self.permissions = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_permissions(&mut self) -> &mut ::std::string::String {
        &mut self.permissions
    }

    // Take field
    pub fn take_permissions(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.permissions, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeviceSpec {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.container_path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host_path)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.permissions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.container_path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.container_path);
        }
        if !self.host_path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.host_path);
        }
        if !self.permissions.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.permissions);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.container_path.is_empty() {
            os.write_string(1, &self.container_path)?;
        }
        if !self.host_path.is_empty() {
            os.write_string(2, &self.host_path)?;
        }
        if !self.permissions.is_empty() {
            os.write_string(3, &self.permissions)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeviceSpec {
        DeviceSpec::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "container_path",
                |m: &DeviceSpec| { &m.container_path },
                |m: &mut DeviceSpec| { &mut m.container_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host_path",
                |m: &DeviceSpec| { &m.host_path },
                |m: &mut DeviceSpec| { &mut m.host_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "permissions",
                |m: &DeviceSpec| { &m.permissions },
                |m: &mut DeviceSpec| { &mut m.permissions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeviceSpec>(
                "DeviceSpec",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeviceSpec {
        static instance: ::protobuf::rt::LazyV2<DeviceSpec> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeviceSpec::new)
    }
}

impl ::protobuf::Clear for DeviceSpec {
    fn clear(&mut self) {
        self.container_path.clear();
        self.host_path.clear();
        self.permissions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeviceSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceSpec {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15proto/discovery.proto\x12\x02v0\"\xe6\x01\n\x1fRegisterDiscoveryHa\
    ndlerRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1a\n\x08\
    endpoint\x18\x02\x20\x01(\tR\x08endpoint\x12U\n\rendpoint_type\x18\x03\
    \x20\x01(\x0e20.v0.RegisterDiscoveryHandlerRequest.EndpointTypeR\x0cendp\
    ointType\x12\x16\n\x06shared\x18\x04\x20\x01(\x08R\x06shared\"$\n\x0cEnd\
    pointType\x12\x07\n\x03UDS\x10\0\x12\x0b\n\x07NETWORK\x10\x01\"\x07\n\
    \x05Empty\">\n\x0fDiscoverRequest\x12+\n\x11discovery_details\x18\x01\
    \x20\x01(\tR\x10discoveryDetails\"8\n\x10DiscoverResponse\x12$\n\x07devi\
    ces\x18\x01\x20\x03(\x0b2\n.v0.DeviceR\x07devices\"\xe9\x01\n\x06Device\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12:\n\nproperties\x18\x02\
    \x20\x03(\x0b2\x1a.v0.Device.PropertiesEntryR\nproperties\x12!\n\x06moun\
    ts\x18\x03\x20\x03(\x0b2\t.v0.MountR\x06mounts\x121\n\x0cdevice_specs\
    \x18\x04\x20\x03(\x0b2\x0e.v0.DeviceSpecR\x0bdeviceSpecs\x1a=\n\x0fPrope\
    rtiesEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05valu\
    e\x18\x02\x20\x01(\tR\x05value:\x028\x01\"h\n\x05Mount\x12%\n\x0econtain\
    er_path\x18\x01\x20\x01(\tR\rcontainerPath\x12\x1b\n\thost_path\x18\x02\
    \x20\x01(\tR\x08hostPath\x12\x1b\n\tread_only\x18\x03\x20\x01(\x08R\x08r\
    eadOnly\"r\n\nDeviceSpec\x12%\n\x0econtainer_path\x18\x01\x20\x01(\tR\rc\
    ontainerPath\x12\x1b\n\thost_path\x18\x02\x20\x01(\tR\x08hostPath\x12\
    \x20\n\x0bpermissions\x18\x03\x20\x01(\tR\x0bpermissions2\\\n\x0cRegistr\
    ation\x12L\n\x18RegisterDiscoveryHandler\x12#.v0.RegisterDiscoveryHandle\
    rRequest\x1a\t.v0.Empty\"\02K\n\x10DiscoveryHandler\x127\n\x08Discover\
    \x12\x13.v0.DiscoverRequest\x1a\x14.v0.DiscoverResponse0\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
